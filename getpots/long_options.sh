#!/bin/bash

set -Eeuo pipefail

script_dir=$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd -P)

function usage() {
  cat << EOF
Usage: $(basename "${BASH_SOURCE[0]}") [-a [rsa|ecc]] [-d <domain>] [-n <name>] [-h]"

üíÅ This script will be automatic certificate genetatory.


Available options:

-a --algorithm         Algorithms supported by the issuing certificate tool. for example: rsa, ecc, default the algorithm is "rsa".
-d --domain            The name of the domain name required to issue the certificate. for example: xxx.com, abc.org, *.abc.org, default the domain name is "domain.com".
-n --name              Name of the file generated by the issuance certificate, default the name is "server".
-h --help              Print this help and exit
-v --verbose           Print script debug info
EOF
  exit
}

function parse_param() {
    domain_name=${domain_name:-domain.com}
    algorithm=${algorithm:-rsa}
    srv_key_name=${srv_key_name:-server}

    # parse argument of the command
    getopt_cmd=$(getopt -o a:d:n:hv --long algorithm:,domain:,name:,help,verbose -n $(basename $0) -- "$@")
    if [ $? -ne 0 ]; then
        exit 1
    fi
    eval set -- "$getopt_cmd"
    while [ -n "$1" ]; do
        case "$1" in
                -a|--algorithm)
                    algorithm="$2"
                    shift ;;
                -d|--domain)
                    domain_name="$2"
                    shift ;;
                -n|--name)
                    srv_key_name="$2"
                    shift ;;
                -h|--help)
                    usage
                    ;;
                -v|--verbose)
                    set -x
                    ;;
                --) shift
                    break ;;
                ?*) echo "$1 is not an option"
                    exit 1 ;;
        esac
        shift
    done
}

parse_param "$@"

echo "algorithm: ${algorithm}"
echo "domain_name: ${domain_name}"
echo "srv_key_name:${srv_key_name}"